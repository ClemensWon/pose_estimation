<?xml version="1.0"?>

<launch>
    <param name="robot_description" command = "$(find xacro)/xacro --inorder $(find pose_estimation)/urdf/ur5_cam.xacro" />

    <!-- Associate the table description parameter with the table's URDF -->
    <param name="table_description" command="$(find xacro)/xacro --inorder $(find pose_estimation)/urdf/object_table.urdf.xacro" />

    <!-- Set teh position in empty world-->
    <arg name="x" default="0" />
    <arg name="y" default="0" />
    <arg name="z" default="0.5" />

    <!-- Launch Gezabo world in paused-->
    <include file = "$(find gazebo_ros)/launch/empty_world.launch" >
        <arg name="use_sim_time" value="true"/>
        <arg name="debug" value="false"/>
        <arg name="gui" value="true"/>
        <arg name="paused" value="true" />
        <!--<arg name="world_name" value="$(arg world_file)"/>-->
    </include>

    <!-- Spawn the robot using the package gazebo_ros-->
    <node name="spawn_the_robot" pkg="gazebo_ros" type="spawn_model"  output="screen" args="-urdf -param robot_description -model ur5 -x $(arg x) -y $(arg y) -z $(arg z)" />

    <!-- Load the controllers-->
    <rosparam command="load" file="$(find pose_estimation)/config/ur5_controllers.yaml"/>


     <!-- Load the node controller manager-->
    <node name="controller_spawner" pkg="controller_manager" type="spawner"
            output="screen" respawn="false" ns="/ur5"
            args="joint_state_controller
                eff_joint_traj_controller
                gripper_controller
                --timeout 60 ">
    </node>

    <!-- Convert joint states to TF transform for rviz and rqt-->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
            output="screen" respawn="false">
            <remap from="/joint_states" to="/ur5/joint_states"/>
    </node>

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
    <remap from="/joint_states" to="/ur5/joint_states"/>



    <!-- Run nodes with moveit -->
    <include file= "$(find moveitconfig)/launch/planning_context.launch" >
        <arg name="load_robot_description" value="false" />
    </include>

    <include file= "$(find moveitconfig)/launch/move_group.launch" >
        <arg name="publish_monitored_planning_scene" value="true" />
    </include>

    <include file= "$(find moveitconfig)/launch/moveit_rviz.launch" >
        <arg name="rviz_config" value="$(find moveitconfig)/launch/moveit.rviz" />
    </include>


    <!-- Spawn the table in Gazebo 
    <node name="spawn_the_table" pkg="gazebo_ros" type="spawn_model" output="screen"
          args="-urdf -param table_description -model my_table -x 1.3 -y 0 -z $(arg z)" />
    -->
    
    <!-- Spawn additional objects if any -->
    <group ns="spawn_objects">
        <rosparam file="$(find pose_estimation)/config/spawn_objects.yaml"/>
    </group>
    <node name="spawn_objects_node" pkg="pose_estimation" type="spawn_objects.py" output="screen"/>
    
    <group ns="generate_dataset">
        <rosparam file="$(find pose_estimation)/config/generate_dataset.yaml"/>
    </group>
    <node name="data_collector" pkg="pose_estimation" type="data_collector.py" output="screen"/>

    <!-- Run moveit node -->
    <node name="ur5_robot_moveit" pkg="pose_estimation" type="moveit.py" output="screen" />

    <!-- Run camera snap node -->
    <node name="camera_snap" pkg="pose_estimation" type="camera_snap.py" output="screen" />


    <!-- cartesian_control -->
    <node name="move_end_effector" pkg="pose_estimation" type="move_end_effector.py" output="screen" />

</launch>